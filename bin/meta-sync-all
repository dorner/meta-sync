#! /usr/bin/env node

const getMetaFile = require('get-meta-file');
const { join, dirname } = require('path');
const fs = require('fs-extra');
const { execSync } = require('child_process');
const prompt = require('syncprompt');
const glob = require('glob');

const usage = `
usage: 
       meta sync

Copies contents of shared directory/ies to all sibling projects. 
Will use the current project as the source.
`;

if (process.argv[2] === '--help') return console.log(usage);

const projectDir = getProjectDir();
const parentDir = dirname(getMetaFile.getFileLocation());
let sourceProject = null;
let projects = [];
let changed = false;
let syncConfig = {};

/** Return the parent directory of the current project.
 * @return {String}
 */
function getProjectDir() {
  return execSync('git rev-parse --show-toplevel').toString().trim();
}

/** Read the meta configuration as a JSON blob. Store the projects and
 * calculate the shared directory.
 */
function readMetaConfig() {
  const meta = getMetaFile();
  projects = Object.keys(meta['projects']);
  sourceProject = projects.filter(project => projectDir.includes(project))[0];
  if (sourceProject == null) {
    throw `Current project directory ${projectDir} does not exist in meta configuration!`
  }
  projects = projects.filter(project => project !== sourceProject);
  if (meta['config'] && meta['config']['sync']) {
    syncConfig = meta['config']['sync'];
  }
  else {
    syncConfig = { "shared" : "*" }
  }
}

/**
 * Compare the given relative file path to the different destinations
 * and copy over if necessary.
 * @param {String} path
 * @param {Array<String>} targets
 */
function compareAndCopyFiles(path, targets) {
  if (!glob.hasMagic(path) && fs.statSync(path).isDirectory()) {
    path = `${path}/**/*`;
  }
  const sourceFiles = glob.sync(`${projectDir}/${path}`, { nodir: true} ).
    map(file => file.replace(projectDir, ''));

  for (const target of targets) {
    const targetBaseDir = `${parentDir}/${target}`;
    let targetFiles = glob.sync(`${targetBaseDir}/${path}`, { nodir: true}).
      map(file => file.replace(targetBaseDir, ''));

    // handle deletions
    const deletedFiles = targetFiles.filter(file => !sourceFiles.includes(file));
    targetFiles = targetFiles.filter(file => !deletedFiles.includes(file));
    for (const file of deletedFiles) {
      console.log(`Deleting ${file} in ${target} - does not exist in source project ${sourceProject}...`);
      fs.unlinkSync(`${targetBaseDir}${file}`);
      changed = true;
    }

    for (const file of sourceFiles) {
      const targetFile = `${targetBaseDir}${file}`;
      const sourceFile = `${projectDir}${file}`;
      if (fs.existsSync(targetFile)) {
        // check if the files are the same
        const buf1 = fs.readFileSync(sourceFile);
        const buf2 = fs.readFileSync(targetFile);
        if (!buf1.equals(buf2)) {
          console.log(`Overwriting ${file} in ${target} with contents from ${sourceProject}`);
          fs.copySync(sourceFile, targetFile);
          changed = true;
        }
      }
      else {
        console.log(`Creating ${file} in ${target} with contents from ${sourceProject}`);
        fs.copySync(sourceFile, targetFile);
        changed = true;
      }
    }
  }
}

/**
 * Pull remote branch if necessary.
 */
function gitPull() {
  for (const project of projects) {
    try {
      execSync(`cd ${parentDir}/${project} && git show-branch remotes/origin/`, { stdio: 'ignore' });
    }
    catch(e) {
      console.log(`Couldn't pull remote branch for ${project}: ${e}`);
      return;
    }
    execSync(`cd ${parentDir}/${project} && git pull`, { stdio: 'ignore'} );
  }
  console.debug("Pulled latest parent directories");
}

function main() {
  gitPull();
  readMetaConfig();
  for (const [path, targets] of Object.entries(syncConfig)) {
    compareAndCopyFiles(path, targets === "*" ? projects : targets);
  }
  if (changed) {
    console.log("Files in parent repo and sibling repos have changed! Please commit and push your changes!");
    process.exit(1);
  }
}

main();
